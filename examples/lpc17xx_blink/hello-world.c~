/*
 * Copyright (c) 2006, Swedish Institute of Computer Science.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This file is part of the Contiki operating system.
 *
 */

/**
 * \file
 *         A very simple Contiki application showing how Contiki programs look
 * \author
 *         Adam Dunkels <adam@sics.se>
 */

#include "contiki.h"

#include <stdio.h> /* For printf() */
#include "LPC17xx.h"
#include "system_LPC17xx.h"
#include "core_cm3.h"

volatile uint32_t temp;

void _delay(uint32_t del);
void set_LEDS();
void set_HIGH(uint32_t led);
void set_LOW(uint32_t led);
int i;

void _delay(uint32_t del)
{
	uint32_t i;
	for(i=0;i<del;i++)
		temp = i;
}

void set_LEDS()
{
	LPC_SC->PCONP |= ( 1 << 15 ); // power up GPIO
  	LPC_GPIO1->FIODIR |= 1 << 29; // puts P1.29 into output
  	LPC_GPIO1->FIODIR |= 1 << 18; // puts P1.18 into output
}

void set_HIGH(uint32_t led)
{
	LPC_GPIO1->FIOPIN |= 1 << led; // make P1.led high
}

void set_LOW(uint32_t led)
{
	LPC_GPIO1->FIOPIN &= ~( 1 << led ); // make P1.led low
}

/*
volatile uint32_t sys_ticks; 
void SysTick_Handler(void)__attribute__((weak));

void SysTick_Handler(void) 
{
    ++sys_ticks;
    set_HIGH(29);
}

void sleep(uint32_t ms) 
{
    uint32_t curr_ticks = sys_ticks;
    while ((sys_ticks - curr_ticks) < ms);
}

*/


static void SysTick_init(void) {
    /* The upper limit of SysTick
     *
     * Since the MCU clock will be equal to internal RC (assumming the PLL is not
     * activated), 4000000 value will generate 1s interrupt
     *
     * The value is counted at 1 (not zero). Hence -1 offset is introduced
     */
    SysTick->LOAD = (4000000 - 1);
    SysTick->LOAD = SystemCoreClock/100 - 1;
    /* SysTick control register
     *
     * SYSTICK_CLKSOURCE = 1 means the timer will use CPU (core)'s clock
     * SYSTICK_TICKINT = 1 means the SysTick interrupt is activated on NVIC
     * SYSTICK_ENABLE = 1 means enable SysTick
     */
    SysTick->CTRL = (1 << SYSTICK_CLKSOURCE) | (1<<SYSTICK_TICKINT) | (1 << SYSTICK_ENABLE);
}

volatile unsigned long timeval;
void SysTick_Handler(void)__attribute__((weak));

void delay_systick(unsigned long tick)
{
  timeval = 0;

  while(timeval != tick) {
    __WFI();
  }
}

void SysTick_Handler(void) {
  timeval++;
  //now++;
}


void blink_N()
{
 for(i=0;i<5;i++)
 {
    set_HIGH(29); // make P1.18 low
    _delay( 1 << 22 );
    set_LOW(29); // make P1.29 high
    _delay( 1 << 22 );
 }
}

/*---------------------------------------------------------------------------*/
PROCESS(hello_world_process, "Hello world process");
AUTOSTART_PROCESSES(&hello_world_process);
/*---------------------------------------------------------------------------*/
PROCESS_THREAD(hello_world_process, ev, data)
{
  PROCESS_BEGIN();

  set_LEDS();

  //while (1) {

    
    //set_LOW(29); // make P1.29 high
    //_delay( 1 << 20 );

    /*Setup SysTick to interrupt every 1 ms*/
    //SysTick_Config((SystemCoreClock / 1000) * 10000 - 1);

    //set_HIGH(29); // make P1.18 low

    //_delay( 1 << 20 );
    //set_HIGH(29);
    
   /*Setup SysTick to interrupt every 1 ms*/
    //SysTick_Config((SystemCoreClock / 1000) * 500 - 1);

/*
    set_HIGH(18); // make P1.18 high
    _delay( 1 << 20 );
    set_LOW(29); // make P1.29 low
    _delay( 1 << 20 );
*/

    //printf("Hello, world\n");

  //}
  
  PROCESS_END();
}
/*---------------------------------------------------------------------------*/



